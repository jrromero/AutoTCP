# J.R. Romero, A. Ramírez, A. Fuentes-Almoguera, C. García.
# "Automated machine learning for test case prioritisation".
# 2024.

# Script to create a latex table with the mean and std APFDC score of the ensembles trained in the ahmadreza dataset, both with all versions and with the last 50 versions
# Uses the .csv files generated by apfdc_score.py

import pandas as pd
import os

curdir = os.path.dirname(os.path.abspath(__file__))

results_folder = 'apfdc_scores_%s'
executions = [1, 2, 3, 4, 5]

datasets_path = 'dataset/datasets/data/versions/ahmadreza'
datasets = os.listdir(os.path.join(curdir, datasets_path))

results = pd.DataFrame(columns=['dataset', 'apfdc_mean', 'apfdc_std'])
results_50 = pd.DataFrame(columns=['dataset', 'apfdc_mean', 'apfdc_std'])

for dataset in datasets:
	apfdc_scores = []
	apfdc_50_scores = []

	for execution in executions:
		data = pd.read_csv(os.path.join(curdir, results_folder % execution, dataset + '.csv'))
		data = data.sort_values(by=['version'], ignore_index=True)
		apfdc_scores.append(data['apfdc'].mean())

		if data.shape[0] >= 50:
			apfdc_50_scores.append(data['apfdc'].iloc[-50:].mean())
		else:
			apfdc_50_scores.append(data['apfdc'].mean())
			
	results = results.append({'dataset': dataset, 'apfdc_mean': str(pd.Series(apfdc_scores).mean()), 'apfdc_std': str(pd.Series(apfdc_scores).std())}, ignore_index=True)
	results_50 = results_50.append({'dataset': dataset, 'apfdc_mean': str(pd.Series(apfdc_50_scores).mean()), 'apfdc_std': str(pd.Series(apfdc_50_scores).std())}, ignore_index=True)

results = results.sort_values(by=['dataset'], ignore_index=True, key=lambda x: x.str.lower())
results_50 = results_50.sort_values(by=['dataset'], ignore_index=True, key=lambda x: x.str.lower())
results['apfdc'] = results['apfdc_mean'].apply(lambda x: str(round(float(x), 4))) + '+-' + results['apfdc_std'].apply(lambda x: str(round(float(x), 4)))
results_50['apfdc'] = results_50['apfdc_mean'].apply(lambda x: str(round(float(x), 4))) + '+-' + results_50['apfdc_std'].apply(lambda x: str(round(float(x), 4)))

print('All versions')
print(results.to_latex(index=False, columns=['dataset', 'apfdc']))
print(results['apfdc_mean'].apply(lambda x: float(x.split('+')[0])).mean(), results['apfdc_mean'].apply(lambda x: float(x.split('+')[0])).std())

print()

print('Last 50 versions')
print(results_50.to_latex(index=False, columns=['dataset', 'apfdc']))
print(results_50['apfdc_mean'].apply(lambda x: float(x.split('+')[0])).mean(), results_50['apfdc_mean'].apply(lambda x: float(x.split('+')[0])).std())