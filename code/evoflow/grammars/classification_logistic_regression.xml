<grammar>
    <!--  Root -->
    <root-symbol>workflow</root-symbol>
     
    <!-- Terminals -->
    <terminals>

        <!-- PREPROCESSING -->

        <!-- imputer -->

        <terminal name="simpleImputer" type="imputer" code="sklearn.impute.SimpleImputer">
            <hparam name="simp::strategy" type="categorical" values="mean;median;most_frequent" default="mean"/>
        </terminal>

        <terminal name="knnImputer" type="imputer" code="sklearn.impute.KNNImputer">
            <hparam name="kimp::strategy" type="categorical" values="mean;median;most_frequent" default="mean"/>
            <hparam name="kimp::weights" type="categorical" values="uniform;distance" default="uniform"/>
            <hparam name="kimp::n_neighbors" type="uni_int" lower="2" upper="10" default="5"/>
        </terminal>

        <!-- scaler -->

        <terminal name="minMaxScaler" type="scaler" code="sklearn.preprocessing.MinMaxScaler"/>

        <terminal name="maxAbsScaler" type="scaler" code="sklearn.preprocessing.MaxAbsScaler"/>

        <terminal name="robustScaler" type="scaler" code="sklearn.preprocessing.RobustScaler">
            <hparam name="rs::with_centering" type="bool" default="True"/>
            <hparam name="rs::with_scaling" type="bool" default="True"/>
        </terminal>

        <terminal name="standardScaler" type="scaler" code="sklearn.preprocessing.StandardScaler">
            <hparam name="ss::with_mean" type="bool" default="True"/>
            <hparam name="ss::with_std" type="bool" default="True"/>
        </terminal>

        <terminal name="normalizer" type="scaler" code="sklearn.preprocessing.Normalizer">
            <hparam name="nor::norm" type="categorical" values="l1;l2;max" default="l2"/>
        </terminal>

        <!-- featureAumentation -->

        <!--
        <terminal name="polynomialFeatures" type="featureAumentation" code="sklearn.preprocessing.PolynomialFeatures">
            <hparam name="pf::include_bias" type="bool" default="True"/>
            <hparam name="pf::interaction_only" type="bool" default="False"/>
        </terminal>
        -->

        <terminal name="nystroem" type="featureAumentation" code="sklearn.kernel_approximation.Nystroem">
            <hparam name="nyss::kernel" type="categorical" values="rbf;cosine;sigmoid;poly" default="rbf"/>
            <hparam name="nyss::gamma" type="uni_float" lower="3.0517578125e-05" upper="8" default="0.1" log="True"/>
            <hparam name="nyss::n_components" type="uni_int" lower="10" upper="100" default="100"/>
            <hparam name="nyss::degree" type="uni_int" lower="2" upper="5" default="2"/>
            <hparam name="nyss::coef0" type="uni_float" lower="-1" upper="1" default="0"/>
        </terminal>

        <terminal name="rbfSampler" type="featureAumentation" code="sklearn.kernel_approximation.RBFSampler">
            <hparam name="rbf::gamma" type="uni_float" lower="1e-3" upper="1.0" default="0.5" log="True"/>
            <hparam name="rbf::n_components" type="uni_int" lower="10" upper="100" default="100"/>
        </terminal>

        <!-- featureSelection -->

        <terminal name="varianceThreshold" type="featureSelection" code="sklearn.feature_selection.VarianceThreshold"/>

        <terminal name="selectPercentile" type="featureSelection" code="sklearn.feature_selection.SelectPercentile">
            <hparam name="sp::percentile" type="uni_float" lower="1" upper="99" default="50"/>
        </terminal>

        <terminal name="selectFwe" type="featureSelection" code="sklearn.feature_selection.SelectFwe">
            <hparam name="fwe::alpha" type="uni_float" lower="1e-3" upper="0.05" default="0.01" log="True"/>
        </terminal>

        <!-- featureExtraction -->

        <terminal name="featureAgglomeration" type="featureExtraction" code="sklearn.cluster.FeatureAgglomeration">
            <hparam name="fagg::n_clusters" type="uni_int" lower="2" upper="25" default="25"/>
            <hparam name="fagg::affinity" type="categorical" values="euclidean;manhattan;cosine" default="euclidean"/>
            <hparam name="fagg::linkage" type="categorical" values="ward;complete;average" default="ward"/>
        </terminal>

        <terminal name="pca" type="featureExtraction" code="sklearn.decomposition.PCA">
            <hparam name="pca::n_components" type="uni_float" lower="0.5" upper="0.9999" default="0.9999"/>
            <hparam name="pca::whiten" type="bool" default="False"/>
        </terminal>
       
        <terminal name="fastICA" type="featureExtraction" code="sklearn.decomposition.FastICA">
            <hparam name="ica::n_components" type="uni_int" lower="2" upper="100" default="3"/>
            <hparam name="ica::algorithm" type="categorical" values="parallel;deflation" default="parallel"/>
            <hparam name="ica::whiten" type="bool" default="False"/>
            <hparam name="ica::fun" type="categorical" values="logcosh;exp;cube" default="logcosh"/>
        </terminal>

        <terminal name="truncatedSVD" type="featureExtraction" code="sklearn.decomposition.TruncatedSVD">
            <hparam name="trun::target_dim" type="uni_int" lower="10" upper="256" default="0.5" log="True"/>
            <hparam name="trun::algorithm" type="categorical" values="arpack;randomized" default="randomized"/>
        </terminal>    

        <!-- balance -->

        <terminal name="randomOverSampler" type="balance" code="imblearn.over_sampling.RandomOverSampler">
            <hparam name="ras::sampling_strategy" type="categorical" values="minority;not minority;not majority" default="not majority"/>
        </terminal>

        <terminal name="randomUnderSampler" type="balance" code="imblearn.under_sampling.RandomUnderSampler">
            <hparam name="rus::sampling_strategy" type="categorical" values="minority;not minority;not majority" default="not majority"/>
            <hparam name="rus::replacement" type="bool" default="False"/>
        </terminal>

        <terminal name="smote" type="balance" code="imblearn.over_sampling.SMOTE">
            <hparam name="smote::sampling_strategy" type="categorical" values="minority;not minority;not majority" default="not majority"/>
            <hparam name="smote::k_neighbors" type="uni_int" lower="2" upper="5" default="5"/>
        </terminal>

        <terminal name="smoteTomek" type="balance" code="imblearn.combine.SMOTETomek">
            <hparam name="smoteT::sampling_strategy" type="categorical" values="minority;not minority;not majority" default="not majority"/>
        </terminal>


        <!-- CLASSIFIERS -->

        <!-- linear -->

        <!--<terminal name="logisticRegression" type="linear" code="sklearn.linear_model.LogisticRegression">
            <hparam name="lr::penalty" type="categorical" values="l1;l2" default="l2"/>
            <hparam name="lr::dual" type="bool" default="True"/>
            <hparam name="lr::C" type="uni_float" lower="1e-4" upper="25" default="1" log="True"/>
            <hparam name="lr::class_weight" type="categorical" values="balanced" default="None"/>
        </terminal>-->
        <terminal name="logisticRegression" type="linear" code="sklearn.linear_model.LogisticRegression">
            <hparam name="lr::penalty" type="categorical" values="l1;l2;none" default="l2"/>
            <hparam name="lr::solver" type="categorical" values="lbfgs;liblinear;newton-cg;sag;saga" default="lbfgs"/>
            <hparam name="lr::max_iter" type="fix_int" value="1000"/>
            <hparam name="lr::C" type="uni_float" lower="1e-4" upper="25" default="1" log="True"/>
            <hparam name="lr::class_weight" type="categorical" values="balanced" default="None"/>
        </terminal>

        <terminal name="generalizedLinearModel" type="linear" code="evoflow.extension.StatsmodelsGeneralizedLinearModel">
            <hparam name="glm::fit_intercept" type="fix_bool" value="True"/>
        </terminal>

    </terminals>
     
    <!-- Non terminals: are represented as production rules -->
    <non-terminals>
 
        <!-- Structure definition -->
        <non-terminal name="workflow">
            <production-rule>classificationBranch</production-rule>
        </non-terminal>
         
        <non-terminal name="classificationBranch">
            <production-rule>classifier</production-rule>
            <production-rule>preprocessingBranch;classifier</production-rule>
        </non-terminal>

        <non-terminal name="preprocessingBranch">
            <production-rule>preprocess</production-rule>
            <production-rule>preprocessingBranch;preprocess</production-rule>
        </non-terminal>
 
        <!-- Classifiers -->
        <non-terminal name="classifier">
            <!-- linear -->
            <production-rule>logisticRegression;logisticRegression_hp</production-rule>
            <production-rule>generalizedLinearModel;generalizedLinearModel_hp</production-rule>
        </non-terminal>

        <!-- Preprocessing -->
        <non-terminal name="preprocess">
            <!-- feature selection-->
            <production-rule>selectPercentile;selectPercentile_hp</production-rule>
            <production-rule>selectFwe;selectFwe_hp</production-rule>
            <production-rule>varianceThreshold</production-rule>
            <!-- scaler -->
            <production-rule>minMaxScaler</production-rule>
            <production-rule>maxAbsScaler</production-rule>
            <production-rule>standardScaler;standardScaler_hp</production-rule>
            <production-rule>robustScaler;robustScaler_hp</production-rule>
            <production-rule>normalizer;normalizer_hp</production-rule>
            <!-- feature extraction -->
            <production-rule>truncatedSVD;truncatedSVD_hp</production-rule>
            <production-rule>pca;pca_hp</production-rule>
            <production-rule>fastICA;fastICA_hp</production-rule>
            <production-rule>featureAgglomeration;featureAgglomeration_hp</production-rule>
            <!-- feature aumentation -->
            <production-rule>nystroem;nystroem_hp</production-rule>
            <production-rule>rbfSampler;rbfSampler_hp</production-rule>
            <!--<production-rule>polynomialFeatures;polynomialFeatures_hp</production-rule>-->
            <!-- imputation -->
            <production-rule>simpleImputer;simpleImputer_hp</production-rule>
            <production-rule>knnImputer;knnImputer_hp</production-rule>
            <!-- balance -->
            <production-rule>randomOverSampler;randomOverSampler_hp</production-rule>
            <production-rule>randomUnderSampler;randomUnderSampler_hp</production-rule>
            <production-rule>smote;smote_hp</production-rule>
            <production-rule>smoteTomek;smoteTomek_hp</production-rule>
        </non-terminal>

    </non-terminals>
</grammar>